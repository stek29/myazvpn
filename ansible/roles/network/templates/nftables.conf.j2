#!/usr/sbin/nft -f
# vim: set expandtab ts=2 sw=2 ai

flush ruleset

define ETHDEV = {{ net_nft_oifname | quote }};
define WGDEV = {{ net_wg_ifname | quote }};

define WGPORT = {{ net_wg_listen_port }};

define DNSMAP_RANGE = {{ net_nft_dnsmap_range }};
define DNS_REDIRECT_TO = {{ net_nft_dns_redirect_to }};

table inet mangle {
  chain forward {
    type filter hook forward priority mangle; policy accept;
    tcp flags & (syn|rst) == syn \
        counter \
        tcp option maxseg size set rt mtu \
        comment "clamp mss to mtu"
  }
}

table inet filter {
  flowtable f {
    hook ingress priority filter; devices = { $ETHDEV, $WGDEV };
  }

  chain input {
    type filter hook input priority filter; policy accept;

    ct state vmap { established : accept, related : accept, invalid : drop } \
      comment "accept ct established and related, drop invalid"

    iif lo \
      counter accept \
      comment "accept loopback"

    udp dport $WGPORT \
      counter accept \
      comment "accept wireguard"

    ip protocol . th dport vmap { \
      tcp . 22 : accept,
      udp . 68 : accept
    } \
      comment "accept ssh and dhcp"

    meta l4proto {icmp, ipv6-icmp} \
      counter accept \
      comment "accept icmp"

    iif $WGDEV \
      meta l4proto ospf \
      counter accept \
      comment "accept ospf on wg"

    iif $WGDEV \
      meta l4proto {tcp, udp} \
      th dport 53 \
      counter accept \
      comment "accept DNS"

    counter # log flags all prefix "input drop "
  }

  chain forward {
    type filter hook forward priority filter; policy accept;

    ct state { established, related } \
      meta l4proto {tcp, udp} \
      flow add @f \
      counter \
      comment "offload ct established and related"

    ct state vmap { established : accept, related : accept, invalid : drop } \
      comment "accept ct established and related, drop invalid"

    iif $WGDEV \
      counter accept \
      comment "accept from wg"

    counter \
      log flags all prefix "forward drop "
  }

  chain output {
    type filter hook output priority filter; policy accept;

    counter
  }
}

table ip nat {
  map dnsmap {
    type ipv4_addr : ipv4_addr ;
  }

  chain dnsmap {
    counter \
      dnat to ip daddr map @dnsmap \
      comment "dnat known dnsmap entries"

    counter reject \
      comment "reject unknown dnsmap entries"
  }

  chain prerouting {
    type nat hook prerouting priority dstnat; policy accept;

    iif $WGDEV \
      meta l4proto {tcp, udp} \
      th dport 53 \
      counter \
      dnat to $DNS_REDIRECT_TO \
      comment "steal dns to local server"

{% if net_nft_ntp_redirect_enabled %}
    iif $WGDEV \
      meta l4proto udp \
      th dport 123 \
      counter \
      dnat to {{ net_nft_ntp_redirect_to }} \
      comment "steal ntp to custom server"
{% endif %}

    ip daddr $DNSMAP_RANGE \
      counter goto dnsmap \
      comment "process dnsmap addresses"
  }

  chain postrouting {
    type nat hook postrouting priority srcnat; policy accept;

    oif $ETHDEV \
      counter masquerade \
      comment "masquerade outgoing traffic"
  }
}
